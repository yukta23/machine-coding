package com.parking.services;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Random;

import com.parking.models.ParkingLot;
import com.parking.models.Slot;
import com.parking.models.Vehicle;
import com.parking.utils.Color;
import com.parking.utils.Type;

public class ParkingServiceImpl implements ParkingService {
	public HashMap<Integer, ParkingLot> parkingMap = new HashMap<>();
	public int parkingId;
	@Override
	public ParkingLot createParkingLot(int parkingId, int floors, int slotsPerFloor) {
		this.parkingId = parkingId;
		ParkingLot parkingLot = new ParkingLot(parkingId, floors, slotsPerFloor);
		ArrayList<Slot> slots = new ArrayList<Slot>();
		int k = 0;
		for( int i = 0 ; i < floors; i++ ) {
			for( int j = 0; j < slotsPerFloor; j++ ) {
				int typePick = new Random().nextInt(Type.values().length);
				Slot s = new Slot(++k, parkingId, i + 1, Type.values()[typePick]);
				slots.add(s);
			}
		}
		parkingLot.setParkingSlots(slots);
		this.parkingMap.put(parkingId, parkingLot);
		return parkingLot;
	}

	@Override
	public String parkVehicle(Type vehicleType, String regNo, Color color) {
		ParkingLot pl = this.parkingLotById(this.parkingId);
		if (pl == null )
			return "Parking lot dne";
		ArrayList<Slot> slots = pl.getParkingSlots();
		Slot slotBooked = null;
		Vehicle vehicle = new Vehicle(regNo, vehicleType, color);
		for( int i = 0; i < slots.size(); i++ ) {
			Slot s = slots.get(i);
			System.out.print(s.getFloorId());
			if (s.getType() == vehicleType && s.isVacant()) {
				s.setVehicle(vehicle);
				slotBooked = s;
			}
		}
		String ticket = "Parking Lot Full";
		if (slotBooked != null )
			ticket = parkingId + "_" + slotBooked.getFloorId() + "_" + slotBooked.getId(); 
		System.out.println(ticket);
		return ticket;
	}

	@Override
	public void showParkingLotStatus(int parkingId) {
		ParkingLot pl = this.parkingLotById(parkingId);
		if (pl != null)
			this.printParkingLot(pl);
		else 
			System.out.println("Given parking lot doesn't exist");
	}
	
	//Private handlers
	private ParkingLot parkingLotById(int parkingId) {
		if (this.parkingMap.containsKey(parkingId)) {
			return this.parkingMap.get(parkingId);
		}
		return null;
	}
	
	private void printParkingLot(ParkingLot  parkingLot) {
		System.out.println("*********Printing Parking Lot Status************");
		ArrayList<Slot> slots = parkingLot.getParkingSlots();
		for( int i = 0; i < slots.size(); i++ ) {
			Slot s = slots.get(i);
			System.out.println("Slot: "+ s.getId() +
					", Floor: " +  s.getFloorId() + 
					", Type: " + s.getType() +
					", Vacancy: " + s.isVacant());
		}
		
	}
}
